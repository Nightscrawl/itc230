{{!-- <h2>Dragon Age Novels:</h2>
<ul>
    {{#each books}}
        <a href="/detail?item={{title}}"><li>{{title}}</li></a>
    {{/each}}
</ul> --}}


<!DOCTYPE html>
<html lang="en-us">
    <head>
        <title>Dragon Age Books</title>
        <meta name="author" content="K. Abell" />
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,inital-scale=1" />
        <meta name="robots" content="noindex,nofollow" />
        <!-- <link href="css/style.css" rel="stylesheet" /> -->
        <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
        <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
        <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
    </head>
    
    <body>

        <div id="root"></div>


        <script type="text/babel">

            const BookIndex = (props) => {
                // console.log(props)

                const book_list = props.books.map((item) => {
                    return (
                        <li onClick={props.clickHandler} key={item._id}>{item.title}</li>
                    );
                });
                // props get passed on render
                // one of those props is an array, "books"
                // each book has a title

                return (
                    <div>
                        <h1>Dragon Age Book List</h1>
                        <ul>
                            {book_list}
                        </ul>
                        <hr />
                    </div>
                );
            }

            const BookDetail = (props) => {  // THIS IS OLD, NOT USED
                return (
                    <div>
                        <h2>Details for {props.book.title}</h2>
                        <p>Author: {props.book.author}</p>
                        <p>Publisher: {props.book.publisher}</p>
                        <p>Release Date: {props.book.date}</p>
                        <p>Pages: {props.book.pages}</p>
                        <p>Notes: {props.book.notes}</p>
                    </div>
                );
            }

            const BookInfo = (props) => {
                return (
                    <div>
                        <form>
                            <p>
                                Title: <input onChange={props.changeHandler} type="text" name="title" value={props.book.title || ""} />
                            </p>

                            <p>
                                Author: <input onChange={props.changeHandler} type="text" name="author" value={props.book.author || ""} />
                            </p>

                            <p>
                                Publisher: <input onChange={props.changeHandler} type="text" name="publisher" value={props.book.publisher || ""} />
                            </p>

                            <p>
                                Release Date: <input onChange={props.changeHandler} type="text" name="date" value={props.book.date || ""} />
                            </p>

                            <p>
                                Pages: <input onChange={props.changeHandler} type="text" name="pages" value={props.book.pages || ""} />
                            </p>

                            <p>
                                Notes: <textarea onChange={props.changeHandler} type="text" name="notes" value={props.book.notes || ""}></textarea>
                            </p>                            
                        </form>
                        <button onClick={props.save}>Save</button> 
                        <button onClick={props.clear}>Clear</button> 
                        <button onClick={props.delete}>Delete</button>

                    </div>
                );
            }

            class App extends React.Component{

                constructor(props){
                    super(props);  // Set initial state using data from server application

                    this.state = {
                        allBooks: {{{ books }}},  // provided by the route -- DO NOT ADD WHITE SPACE
                        currentBook: {}  // current selected item; on render, current book is empty
                    };

                    this.handleClick = this.handleClick.bind(this);  // This binding is necessary to make `this` work in the callback
                    this.onChange = this.onChange.bind(this);
                    this.onSave = this.onSave.bind(this);
                    this.onClear = this.onClear.bind(this);
                    this.onDelete = this.onDelete.bind(this);
                }

                handleClick(e) {
                    let title = e.target.innerText;

                    let newBook = this.state.allBooks.find((item) => {
                        return item.title == title;
                    });
                    // look at each item
                    // find book whose title matches the target of the click

                    // console.log(e.target.innerText);
                    // console.log(newBook);

                    this.setState(state => ({
                        currentBook: newBook
                    }));
                }
                // function that is attribute of App class

                onChange(e) {
                    let newItem = this.state.currentBook;
                    newItem[e.target.name] = e.target.value;
                    this.setState({currentBook: newItem});
                }

                onSave() {
                    let newItem = this.state.currentBook;
                    delete newItem["_id"];
                    fetch("/api/books/update", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(newItem)
                    })
                        .then(res => res.json())
                        .then((result) => {
                            console.log(result);

                            const newList = this.state.allBooks;  // adds the new book to the array
                            newList.push(newItem);
                            this.setState({allBooks: newList});  // updates the list to show new added book

                        })
                        .catch(err => console.log(err))
                }

                onClear() {
                    this.setState({ currentBook: {} });
                }

                onDelete() {
                    let delBook = this.state.currentBook;
                    fetch("/api/books/delete/"+delBook.title)
                        .then(res => res.json())
                        .then((result) => {
                            // console.log(result);

                            const newList = this.state.allBooks.filter((book) => {
                                return book.title !== delBook.title;
                            });  // look at each item and if not same by title, delete

                            this.setState({allBooks: newList});
                        })
                        .then(this.setState({ currentBook: {} }) )  // clears form fields after book is deleted
                        .catch(err => console.log(err))
                }

                render() {
                    return (
                        <div>
                            <BookIndex books={this.state.allBooks} clickHandler={this.handleClick} />
                            <BookInfo book={this.state.currentBook} changeHandler={this.onChange} save={this.onSave} clear={this.onClear} delete={this.onDelete} />
                        </div>
                    );
                }
            }

            ReactDOM.render(<App />, document.getElementById('root'));

        </script>    
    
    </body>
    
</html>
